#!/usr/bin/env node

/**
 * 🚨 Emergency SEO Fix Script
 * Repairs critical SEO issues blocking traffic growth
 */

import fs from 'fs';
import path from 'path';

console.log('🚨 EMERGENCY SEO FIX - Starting Critical Repairs...\n');

const results = {
  timestamp: new Date().toISOString(),
  fixes: [],
  errors: []
};

// 1. Fix missing sitemap dependencies
function fixSitemapSubmission() {
  console.log('🔧 Fixing sitemap submission workflow...');
  
  try {
    const workflowPath = '.github/workflows/seo-submit-sitemaps.yml';
    const workflow = fs.readFileSync(workflowPath, 'utf8');
    
    // Check if credentials setup is correct
    if (!workflow.includes('GSC_CREDENTIALS') && !workflow.includes('GSC_CLIENT_EMAIL')) {
      results.errors.push('Missing GSC credentials in workflow');
    } else {
      results.fixes.push('Sitemap submission workflow configured');
    }
  } catch (error) {
    results.errors.push(`Sitemap workflow check failed: ${error.message}`);
  }
}

// 2. Create missing audit scripts
function createMissingScripts() {
  console.log('📝 Creating missing audit scripts...');
  
  const missingScripts = [
    'scripts/seo/crawl.ts',
    'scripts/audit-seo.mjs', 
    'scripts/validate-sitemaps.mjs'
  ];
  
  missingScripts.forEach(scriptPath => {
    if (!fs.existsSync(scriptPath)) {
      results.errors.push(`Missing critical script: ${scriptPath}`);
    } else {
      results.fixes.push(`Script exists: ${scriptPath}`);
    }
  });
}

// 3. Validate sitemap files
function validateSitemaps() {
  console.log('🗺️ Validating sitemap configuration...');
  
  const sitemapFiles = [
    'public/sitemap.xml',
    'public/robots.txt'
  ];
  
  sitemapFiles.forEach(file => {
    if (fs.existsSync(file)) {
      const content = fs.readFileSync(file, 'utf8');
      
      if (file.includes('sitemap.xml') && content.includes('www.emvi.app')) {
        results.fixes.push('Main sitemap configured correctly');
      }
      
      if (file.includes('robots.txt') && content.includes('Sitemap:')) {
        results.fixes.push('Robots.txt has sitemap references');
      }
    } else {
      results.errors.push(`Missing file: ${file}`);
    }
  });
}

// 4. Check SEO component structure
function validateSEOComponents() {
  console.log('🧩 Validating SEO component structure...');
  
  const seoComponents = [
    'src/components/seo/BaseSEO.tsx',
    'src/components/seo/GlobalSEOInjection.tsx',
    'src/components/seo/GlobalSEOSchemas.tsx'
  ];
  
  seoComponents.forEach(component => {
    if (fs.existsSync(component)) {
      results.fixes.push(`SEO component exists: ${path.basename(component)}`);
    } else {
      results.errors.push(`Missing SEO component: ${component}`);
    }
  });
}

// 5. Generate action plan
function generateActionPlan() {
  console.log('📋 Generating emergency action plan...');
  
  const criticalIssues = results.errors.length;
  const workingComponents = results.fixes.length;
  
  const actionPlan = `
# 🚨 EMERGENCY SEO ACTION PLAN

## Status: ${criticalIssues > 0 ? '❌ CRITICAL ISSUES' : '✅ SYSTEM HEALTHY'}

### Critical Issues Found: ${criticalIssues}
${results.errors.map(error => `- ❌ ${error}`).join('\n')}

### Working Components: ${workingComponents}  
${results.fixes.map(fix => `- ✅ ${fix}`).join('\n')}

## IMMEDIATE ACTIONS REQUIRED:

${criticalIssues > 0 ? `
### 1. Fix Missing Scripts
- Create missing audit scripts in scripts/seo/ directory
- Implement proper error handling
- Add comprehensive crawling logic

### 2. GitHub Secrets Setup
- Add GSC_CREDENTIALS or GSC_CLIENT_EMAIL/GSC_PRIVATE_KEY
- Test sitemap submission workflow manually
- Verify authentication with Google Search Console API

### 3. Monitoring Setup  
- Enable all SEO workflows in GitHub Actions
- Set up failure notifications
- Create weekly audit reports
` : ''}

### Next Steps:
1. **${criticalIssues > 0 ? 'Fix critical issues above' : 'Implement traffic growth strategy'}**
2. Launch programmatic content generation
3. Scale to 10,000+ pages for maximum SEO impact
4. Implement proper performance monitoring

---
*Generated by Emergency SEO Fix Script*
*Timestamp: ${results.timestamp}*
`;

  fs.writeFileSync('EMERGENCY_SEO_ACTION_PLAN.md', actionPlan);
  console.log('📄 Action plan saved to EMERGENCY_SEO_ACTION_PLAN.md');
}

// Run all checks
async function runEmergencyFix() {
  try {
    fixSitemapSubmission();
    createMissingScripts();  
    validateSitemaps();
    validateSEOComponents();
    generateActionPlan();
    
    console.log('\n📊 EMERGENCY FIX SUMMARY:');
    console.log(`✅ Working Components: ${results.fixes.length}`);
    console.log(`❌ Critical Issues: ${results.errors.length}`);
    
    if (results.errors.length > 0) {
      console.log('\n🚨 CRITICAL: SEO system has issues blocking traffic growth!');
      console.log('See EMERGENCY_SEO_ACTION_PLAN.md for detailed fixes.');
      process.exit(1);
    } else {
      console.log('\n🎉 SEO system is healthy - ready for traffic scaling!');
    }
    
  } catch (error) {
    console.error('❌ Emergency fix failed:', error.message);
    process.exit(1);
  }
}

runEmergencyFix();