
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from "sonner";
import { PricingOptions } from '@/types/job';
import { useTranslation } from '@/hooks/useTranslation';
import { StripeCheckoutResponse } from '@/types/pricing';

export const useSalonPayment = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { t } = useTranslation();

  const initiateSalonPayment = async (
    salonDetails: any, // Type as needed
    pricingOptions?: PricingOptions
  ) => {
    setIsLoading(true);
    console.log("üîç Salon payment initiation started with options:", pricingOptions);
    
    try {
      // Handle free listings directly without going to Stripe
      if (pricingOptions?.selectedPricingTier === 'free') {
        console.log("Processing free salon post...");
        
        const { data: postData, error: postError } = await supabase.functions.invoke('create-free-post', {
          body: { 
            postType: 'salon',
            postDetails: salonDetails,
            pricingOptions
          }
        });

        console.log("Free salon post response:", postData, "Error:", postError);

        if (postError) {
          console.error("Free salon post creation error:", postError);
          toast.error(t("Error creating free salon post", "L·ªói khi t·∫°o b√†i ƒëƒÉng salon mi·ªÖn ph√≠"), {
            description: postError.message || t("Please try again", "Vui l√≤ng th·ª≠ l·∫°i")
          });
          throw postError;
        }

        toast.success(
          t("Your free salon post has been submitted", "Tin salon mi·ªÖn ph√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng"), {
          description: t("You can view it in your dashboard now", "B·∫°n c√≥ th·ªÉ xem n√≥ trong b·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa b·∫°n ngay b√¢y gi·ªù")
        });
        
        return { 
          success: true,
          redirect: `/post-success?payment_log_id=${postData?.payment_log_id}&free=true`,
          data: postData
        };
      } 
      
      // For paid listings, create a Stripe checkout session
      console.log("Creating Stripe checkout for paid salon listing...");

      // Create the request payload
      const payload = {
        postType: 'salon',
        postDetails: salonDetails,
        pricingOptions
      };
      
      console.log("üöÄ Calling create-checkout with payload:", JSON.stringify(payload, null, 2));
      
      const { data, error } = await supabase.functions.invoke('create-checkout', {
        body: payload
      });

      console.log("üì• Stripe checkout raw response:", data);
      
      if (error) {
        console.error("Edge function error:", error);
        toast.error(t("Payment service error", "L·ªói d·ªãch v·ª• thanh to√°n"), {
          description: error.message || t("Could not connect to payment provider", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi nh√† cung c·∫•p d·ªãch v·ª• thanh to√°n")
        });
        throw error;
      }
      
      if (!data) {
        console.error("No data returned from checkout");
        toast.error(t("Invalid response from payment service", "Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ d·ªãch v·ª• thanh to√°n"));
        throw new Error('No data returned from payment service');
      }
      
      console.log("üì• Full checkout response data:", JSON.stringify(data, null, 2));
      
      // Explicitly validate the URL
      if (!data.url) {
        console.error("‚õî No checkout URL received in response:", data);
        toast.error(t("Missing payment URL", "URL thanh to√°n b·ªã thi·∫øu"), {
          description: t("Please try again or contact support", "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£")
        });
        throw new Error('No checkout URL received from Stripe');
      }
      
      console.log("‚úÖ Successfully received Stripe checkout URL:", data.url);
      
      // Return successful response with URL and data
      return { 
        success: true, 
        redirect: data.url,
        data: data,
        sessionId: data.session_id
      };
    } catch (error: any) {
      console.error('‚ùå Salon payment initiation error:', error);
      toast.error(t("Failed to initiate payment", "Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n"), {
        description: error.message || t("Please try again.", "Vui l√≤ng th·ª≠ l·∫°i.")
      });
      return { 
        success: false,
        redirect: null,
        error: error.message || 'Unknown error',
        data: null
      };
    } finally {
      setIsLoading(false);
    }
  };

  return { initiateSalonPayment, isLoading };
};
