
import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { toast } from "sonner";
import { useTranslation } from '@/hooks/useTranslation';
import { JobDetailsSubmission, PricingOptions } from '@/types/job';

export const usePostPayment = () => {
  const [isLoading, setIsLoading] = useState(false);
  const { t } = useTranslation();

  const initiatePayment = async (postType: 'job' | 'salon', postDetails?: any, pricingOptions?: PricingOptions) => {
    setIsLoading(true);
    console.log("üîç Payment initiation started for:", postType, "with options:", pricingOptions);
    try {
      console.log("Initiating payment for:", postType, "with pricing:", pricingOptions?.selectedPricingTier);

      // Handle free listings directly without going to Stripe
      if (pricingOptions?.selectedPricingTier === 'free') {
        console.log("Processing free post...");
        // Create the post directly in the database
        const { data: postData, error: postError } = await supabase.functions.invoke('create-free-post', {
          body: { 
            postType,
            postDetails,
            pricingOptions
          }
        });

        if (postError) {
          console.error("Free post creation error:", postError);
          throw postError;
        }

        toast.success(
          t("Your free post has been submitted", "Tin mi·ªÖn ph√≠ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ƒëƒÉng"), {
          description: t("You can view it in your dashboard now", "B·∫°n c√≥ th·ªÉ xem n√≥ trong b·∫£ng ƒëi·ªÅu khi·ªÉn c·ªßa b·∫°n ngay b√¢y gi·ªù")
        });
        
        // Return success with redirect info
        return { 
          success: true,
          redirect: `/post-success?payment_log_id=${postData?.payment_log_id}&free=true`,
          data: postData
        };
      } 
      
      // For paid listings, create a Stripe checkout session
      console.log("Creating Stripe checkout for paid listing...");
      const { data, error } = await supabase.functions.invoke('create-checkout', {
        body: { 
          postType,
          postDetails,
          pricingOptions
        }
      });

      if (error) {
        console.error("Edge function error:", error);
        toast.error(t("Payment service error", "L·ªói d·ªãch v·ª• thanh to√°n"), {
          description: error.message || t("Could not connect to payment provider", "Kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi nh√† cung c·∫•p d·ªãch v·ª• thanh to√°n")
        });
        throw error;
      }
      
      console.log("Checkout response received:", data);
      
      if (!data) {
        console.error("No data returned from checkout");
        toast.error(t("Invalid response from payment service", "Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ d·ªãch v·ª• thanh to√°n"));
        throw new Error('No data returned from payment service');
      }
      
      if (data?.url) {
        console.log("‚úÖ Redirecting to Stripe checkout URL:", data.url);
        // Instead of returning the URL, directly redirect
        window.location.href = data.url;
        
        // Also return success with redirect URL for component handling
        return { 
          success: true, 
          redirect: data.url,
          data: data
        };
      } else {
        console.error("‚õî No checkout URL received in response:", data);
        toast.error(t("Missing payment URL", "URL thanh to√°n b·ªã thi·∫øu"), {
          description: t("Please try again or contact support", "Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£")
        });
        throw new Error('No checkout URL received from Stripe');
      }
    } catch (error: any) {
      console.error('‚ùå Payment initiation error:', error);
      toast.error(t("Failed to initiate payment", "Kh√¥ng th·ªÉ kh·ªüi t·∫°o thanh to√°n"), {
        description: error.message || t("Please try again.", "Vui l√≤ng th·ª≠ l·∫°i.")
      });
      return { 
        success: false,
        redirect: null,
        error: error.message,
        data: null
      };
    } finally {
      setIsLoading(false);
    }
  };

  return { initiatePayment, isLoading };
};
