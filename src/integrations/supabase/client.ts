
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://wwhqbjrhbajpabfdwnip.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Ind3aHFianJoYmFqcGFiZmR3bmlwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE5OTk2OTMsImV4cCI6MjA1NzU3NTY5M30.1YGaLgfnwqmzn3f28IzmTxDKKX5NoJ1V8IbI3V4-WmM";

// Log Supabase configuration for debugging
console.log('ðŸ”§ [SUPABASE-CONFIG] Project URL:', SUPABASE_URL);
console.log('ðŸ”§ [SUPABASE-CONFIG] Project Ref:', SUPABASE_URL.split('//')[1].split('.')[0]);
console.log('ðŸ”§ [SUPABASE-CONFIG] Anon Key (first 20 chars):', SUPABASE_PUBLISHABLE_KEY.substring(0, 20) + '...');

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Safe storage shim for non-browser environments (tests/SSR)
const getSafeStorage = (): Storage => {
  try {
    if (typeof window !== 'undefined' && window.localStorage) return window.localStorage;
  } catch (e) {
    // ignore access errors (privacy mode, etc.)
  }
  console.warn('ðŸ”§ [SUPABASE-AUTH] localStorage not available, using in-memory storage.');
  const map = new Map<string, string>();
  const memoryStorage = {
    getItem: (key: string) => (map.has(key) ? map.get(key)! : null),
    setItem: (key: string, value: string) => { map.set(key, String(value)); },
    removeItem: (key: string) => { map.delete(key); },
    clear: () => { map.clear(); },
    key: (index: number) => Array.from(map.keys())[index] ?? null,
    get length() { return map.size; },
  } as unknown as Storage;
  return memoryStorage;
};

const SAFE_STORAGE = getSafeStorage();

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: typeof window !== 'undefined',
    storage: SAFE_STORAGE,
    storageKey: 'sb-wwhqbjrhbajpabfdwnip-auth-token',
    flowType: 'pkce',
    // Extended session settings for better persistence
  }
});

// Log auth state for debugging
supabase.auth.onAuthStateChange((event, session) => {
  console.log('ðŸ”§ [SUPABASE-AUTH] Event:', event);
  console.log('ðŸ”§ [SUPABASE-AUTH] User ID:', session?.user?.id || 'None');
  console.log('ðŸ”§ [SUPABASE-AUTH] User Email:', session?.user?.email || 'None');
});
