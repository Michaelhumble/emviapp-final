
import React from "react";
import { motion } from "framer-motion";
import { Button } from "@/components/ui/button";
import { useAuth } from "@/context/auth";
import { useNavigate } from "react-router-dom";
import AIFeatureCard from "./AIFeatureCard";
import { Users, MapPin, Zap, TrendingUp } from "lucide-react";

interface AIMatchmakerContentProps {
  language: "en" | "vi";
  itemVariants: any;
}

const AIMatchmakerContent = ({ language, itemVariants }: AIMatchmakerContentProps) => {
  const { user } = useAuth();
  const navigate = useNavigate();

  const handleCTAClick = () => {
    if (user) {
      navigate('/dashboard');
    } else {
      navigate('/auth');
    }
  };

  const features = language === "en" ? [
    {
      icon: <Users className="h-8 w-8" />,
      title: "Perfect Talent Matching",
      description: "Find the best artists and staff for your salon in seconds. Our AI analyzes skills, experience, and personality‚Äîso you build the dream team, not just fill a seat.",
      gradient: "from-purple-500/10 via-indigo-500/10 to-blue-500/10",
      accentColor: "border-purple-200"
    },
    {
      icon: <MapPin className="h-8 w-8" />,
      title: "Salon Finder & Smart Listings",
      description: "Buy, sell, or discover top-rated salons. AI surfaces the best opportunities and dream locations‚Äîtailored for owners, artists, and investors.",
      gradient: "from-blue-500/10 via-teal-500/10 to-emerald-500/10",
      accentColor: "border-blue-200"
    },
    {
      icon: <Zap className="h-8 w-8" />,
      title: "Instant Job & Customer Matching",
      description: "Artists find perfect-fit jobs. Customers are matched to the right artists and salons‚Äîevery time, everywhere.",
      gradient: "from-emerald-500/10 via-yellow-500/10 to-orange-500/10",
      accentColor: "border-emerald-200"
    },
    {
      icon: <TrendingUp className="h-8 w-8" />,
      title: "Trust & Growth Engine",
      description: "EmviApp's AI works for you 24/7: boosting trust, building your reputation, and helping you grow with every click.",
      gradient: "from-orange-500/10 via-red-500/10 to-pink-500/10",
      accentColor: "border-orange-200"
    }
  ] : [
    {
      icon: <Users className="h-8 w-8" />,
      title: "Gh√©p ƒê√¥i Nh√¢n T√†i Ho√†n H·∫£o",
      description: "T√¨m nh·ªØng ngh·ªá sƒ© v√† nh√¢n vi√™n t·ªët nh·∫•t cho ti·ªám c·ªßa b·∫°n trong v√†i gi√¢y. AI ph√¢n t√≠ch k·ªπ nƒÉng, kinh nghi·ªám v√† t√≠nh c√°ch‚Äîƒë·ªÉ b·∫°n x√¢y d·ª±ng ƒë·ªôi ng≈© m∆° ∆∞·ªõc, kh√¥ng ch·ªâ l·∫•p ch·ªó tr·ªëng.",
      gradient: "from-purple-500/10 via-indigo-500/10 to-blue-500/10",
      accentColor: "border-purple-200"
    },
    {
      icon: <MapPin className="h-8 w-8" />,
      title: "T√¨m Ki·∫øm Ti·ªám & Danh S√°ch Th√¥ng Minh",
      description: "Mua, b√°n, ho·∫∑c kh√°m ph√° c√°c ti·ªám h√†ng ƒë·∫ßu. AI t√¨m ra nh·ªØng c∆° h·ªôi t·ªët nh·∫•t v√† ƒë·ªãa ƒëi·ªÉm m∆° ∆∞·ªõc‚Äîph√π h·ª£p cho ch·ªß ti·ªám, ngh·ªá sƒ© v√† nh√† ƒë·∫ßu t∆∞.",
      gradient: "from-blue-500/10 via-teal-500/10 to-emerald-500/10",
      accentColor: "border-blue-200"
    },
    {
      icon: <Zap className="h-8 w-8" />,
      title: "Gh√©p ƒê√¥i C√¥ng Vi·ªác & Kh√°ch H√†ng T·ª©c Th√¨",
      description: "Ngh·ªá sƒ© t√¨m ƒë∆∞·ª£c c√¥ng vi·ªác ph√π h·ª£p ho√†n h·∫£o. Kh√°ch h√†ng ƒë∆∞·ª£c gh√©p v·ªõi ƒë√∫ng ngh·ªá sƒ© v√† ti·ªám‚Äîm·ªçi l√∫c, m·ªçi n∆°i.",
      gradient: "from-emerald-500/10 via-yellow-500/10 to-orange-500/10",
      accentColor: "border-emerald-200"
    },
    {
      icon: <TrendingUp className="h-8 w-8" />,
      title: "ƒê·ªông C∆° Tin T∆∞·ªüng & Ph√°t Tri·ªÉn",
      description: "AI c·ªßa EmviApp l√†m vi·ªác cho b·∫°n 24/7: tƒÉng c∆∞·ªùng l√≤ng tin, x√¢y d·ª±ng danh ti·∫øng v√† gi√∫p b·∫°n ph√°t tri·ªÉn v·ªõi m·ªói c√∫ click.",
      gradient: "from-orange-500/10 via-red-500/10 to-pink-500/10",
      accentColor: "border-orange-200"
    }
  ];

  return (
    <div className="space-y-16">
      {/* Feature cards grid with blog-style design */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        {features.map((feature, index) => (
          <motion.div
            key={index}
            className="group relative bg-white rounded-2xl p-8 shadow-lg border border-slate-200/60 hover:shadow-xl transition-all duration-500 hover:-translate-y-1"
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            viewport={{ once: true }}
            transition={{ duration: 0.6, delay: index * 0.1 }}
          >
            {/* Gradient background overlay */}
            <div className={`absolute inset-0 bg-gradient-to-br ${feature.gradient} rounded-2xl opacity-50 group-hover:opacity-70 transition-opacity duration-300`} />
            
            {/* Icon */}
            <div className="relative z-10 mb-6">
              <div className="w-16 h-16 bg-white rounded-xl shadow-md flex items-center justify-center text-purple-600 group-hover:scale-110 transition-transform duration-300">
                {feature.icon}
              </div>
            </div>
            
            {/* Content */}
            <div className="relative z-10">
              <h3 className="text-xl font-bold text-slate-900 mb-4 group-hover:text-purple-700 transition-colors duration-300">
                {feature.title}
              </h3>
              <p className="text-slate-600 leading-relaxed">
                {feature.description}
              </p>
            </div>
            
            {/* Hover glow effect */}
            <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-purple-500/10 via-pink-500/10 to-indigo-500/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500" />
          </motion.div>
        ))}
      </div>
      
      {/* CTA Button with blog-style design */}
      <motion.div
        className="flex justify-center pt-8"
        initial={{ opacity: 0, y: 30 }}
        whileInView={{ opacity: 1, y: 0 }}
        viewport={{ once: true }}
        transition={{ duration: 0.8, delay: 0.6 }}
      >
        <motion.div
          whileHover={{ scale: 1.05, y: -2 }}
          whileTap={{ scale: 0.98 }}
          transition={{ duration: 0.2 }}
        >
          <Button
            size="lg"
            onClick={handleCTAClick}
            className="relative px-10 py-4 text-lg font-semibold text-white rounded-xl overflow-hidden group transition-all duration-300 border-0 shadow-lg hover:shadow-xl"
            style={{
              background: "linear-gradient(135deg, #8B5CF6 0%, #EC4899 50%, #F59E0B 100%)",
            }}
          >
            {/* Shimmer effect */}
            <div className="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 transform -skew-x-12 group-hover:animate-pulse" />
            
            {/* Button content */}
            <span className="relative z-10 flex items-center gap-3">
              <span>
                {language === "en" 
                  ? "üöÄ Experience Your AI Matchmaker"
                  : "üöÄ Kh√°m Ph√° AI Gh√©p ƒê√¥i Ngay"
                }
              </span>
              <motion.span
                className="inline-block text-xl"
                animate={{ x: [0, 3, 0] }}
                transition={{ duration: 2, repeat: Infinity, ease: "easeInOut" }}
              >
                ‚Üí
              </motion.span>
            </span>
          </Button>
        </motion.div>
      </motion.div>
    </div>
  );
};

export default AIMatchmakerContent;
