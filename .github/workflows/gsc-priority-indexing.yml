name: üöÄ GSC Priority URL Indexing

on:
  workflow_dispatch:
    inputs:
      limit:
        description: 'Max URLs to submit (default: all 87)'
        required: false
        default: '87'
        type: string
      dry_run:
        description: 'Dry run mode (no actual submissions)'
        type: boolean
        default: false

env:
  BASE_URL: 'https://www.emvi.app'
  PRIORITY_URLS_FILE: 'data/priority-urls.json'

jobs:
  gsc-priority-indexing:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: üîê Validate GSC Secrets
        id: check-secrets
        run: |
          echo "üîí Validating Google Search Console credentials..."
          
          if [ -z "${{ secrets.GSC_CLIENT_EMAIL }}" ] || [ -z "${{ secrets.GSC_PRIVATE_KEY }}" ]; then
            echo "‚ùå GSC credentials missing - priority indexing will be skipped"
            echo ""
            echo "‚ÑπÔ∏è Missing GSC secrets for priority indexing:"
            [ -z "${{ secrets.GSC_CLIENT_EMAIL }}" ] && echo "   - GSC_CLIENT_EMAIL"
            [ -z "${{ secrets.GSC_PRIVATE_KEY }}" ] && echo "   - GSC_PRIVATE_KEY"
            echo ""
            echo "üìã To enable priority indexing:"
            echo "   1. Create Google Service Account with Indexing API access"
            echo "   2. Go to GitHub repo ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions"
            echo "   3. Add GSC_CLIENT_EMAIL and GSC_PRIVATE_KEY"
            echo ""
            echo "::notice::Skipped: priority indexing not supported (missing GSC credentials)"
            echo "has_creds=false" >> $GITHUB_OUTPUT
          else
            # Validate GSC_PRIVATE_KEY format
            PRIVATE_KEY="${{ secrets.GSC_PRIVATE_KEY }}"
            if [[ "$PRIVATE_KEY" != *"-----BEGIN PRIVATE KEY-----"* ]] || [[ "$PRIVATE_KEY" != *"-----END PRIVATE KEY-----"* ]]; then
              echo "‚ùå GSC_PRIVATE_KEY format invalid - missing BEGIN/END PRIVATE KEY markers"
              echo "has_creds=false" >> $GITHUB_OUTPUT
            elif [[ "$PRIVATE_KEY" != *"\\n"* ]]; then
              echo "‚ùå GSC_PRIVATE_KEY format invalid - missing \\n newline sequences"  
              echo "has_creds=false" >> $GITHUB_OUTPUT
            elif [[ "${{ secrets.GSC_CLIENT_EMAIL }}" != *"@"*".iam.gserviceaccount.com" ]]; then
              echo "‚ùå GSC_CLIENT_EMAIL format invalid - should end with .iam.gserviceaccount.com"
              echo "has_creds=false" >> $GITHUB_OUTPUT
            else
              echo "‚úÖ GSC credentials found and validated - proceeding with indexing"
              echo "has_creds=true" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Install deps
        if: steps.check-secrets.outputs.has_creds == 'true'
        run: |
          npm install --legacy-peer-deps
          npm install --no-save googleapis jsonwebtoken
      
      - name: üìÅ Create reports directory
        run: mkdir -p reports/seo/indexing
      
      - name: üìã Load and validate priority URLs
        id: load-urls
        if: steps.check-secrets.outputs.has_creds == 'true'
        run: |
          if [ ! -f "$PRIORITY_URLS_FILE" ]; then
            echo "‚ùå Priority URLs file not found: $PRIORITY_URLS_FILE"
            exit 1
          fi
          
          # Count total URLs
          TOTAL_URLS=$(jq length "$PRIORITY_URLS_FILE")
          echo "üìä Found $TOTAL_URLS priority URLs"
          
          # Apply limit if specified
          LIMIT="${{ github.event.inputs.limit || '87' }}"
          if [ "$LIMIT" -lt "$TOTAL_URLS" ]; then
            echo "‚ö†Ô∏è Limiting to $LIMIT URLs (from $TOTAL_URLS total)"
            URLS_TO_PROCESS=$LIMIT
          else
            URLS_TO_PROCESS=$TOTAL_URLS
          fi
          
          echo "urls_to_process=$URLS_TO_PROCESS" >> $GITHUB_OUTPUT
          echo "total_urls=$TOTAL_URLS" >> $GITHUB_OUTPUT
          
          # Show first 10 URLs for verification
          echo "üìã First 10 priority URLs:"
          jq -r '.[:10][]' "$PRIORITY_URLS_FILE" | while read -r url; do
            echo "  $url"
          done
          
          if [ "$URLS_TO_PROCESS" -gt 10 ]; then
            echo "  ... and $(($URLS_TO_PROCESS - 10)) more URLs"
          fi
      
      - name: üöÄ Submit URLs to GSC Indexing API (Attempt 1)
        id: submit-urls-attempt-1
        if: steps.check-secrets.outputs.has_creds == 'true'
        continue-on-error: true
        env:
          GSC_CREDENTIALS: ${{ secrets.GSC_CREDENTIALS }}
          GSC_CLIENT_EMAIL: ${{ secrets.GSC_CLIENT_EMAIL }}
          GSC_PRIVATE_KEY: ${{ secrets.GSC_PRIVATE_KEY }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          echo "üöÄ Attempting GSC Priority URL Indexing (Attempt 1)..."
          echo "DRY_RUN=$DRY_RUN"
          node scripts/gsc-pulls.mjs --urls=data/priority-urls.json --submitIndexing

      - name: üîÑ Retry Indexing Submission (Attempt 2)
        if: steps.check-secrets.outputs.has_creds == 'true' && steps.submit-urls-attempt-1.outcome == 'failure'
        env:
          GSC_CLIENT_EMAIL: ${{ secrets.GSC_CLIENT_EMAIL }}
          GSC_PRIVATE_KEY: ${{ secrets.GSC_PRIVATE_KEY }}
          DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
        run: |
          echo "üîÑ Retrying GSC Priority URL Indexing (Attempt 2)..."
          echo "DRY_RUN=$DRY_RUN"
          sleep 30  # Wait 30 seconds before retry
          node scripts/gsc-pulls.mjs --urls=data/priority-urls.json --submitIndexing
      
      - name: üìä Log Indexing Results
        if: always()
        run: |
          if [ "${{ steps.check-secrets.outputs.has_creds }}" == "false" ]; then
            echo "‚è≠Ô∏è Indexing skipped: GSC credentials not configured or invalid"
            echo "üí° To enable indexing, add valid GSC_CLIENT_EMAIL and GSC_PRIVATE_KEY secrets"
          else
            echo "‚úÖ Priority URL indexing workflow completed"
            if [ -f ".seo-cache/gsc-indexing-$(date +%Y-%m-%d).json" ]; then
              SUBMITTED_COUNT=$(jq -r '.submitted_count // 0' ".seo-cache/gsc-indexing-$(date +%Y-%m-%d).json")
              FAILED_COUNT=$(jq -r '.failed_count // 0' ".seo-cache/gsc-indexing-$(date +%Y-%m-%d).json")
              echo "submitted: $SUBMITTED_COUNT, errors: $FAILED_COUNT"
            else
              echo "‚ö†Ô∏è No indexing results file found"
            fi
          fi

      - name: üìã Summary Report
        if: always()
        run: |
          echo "## üöÄ GSC Priority URL Indexing Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: GSC Priority URL Indexing" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.check-secrets.outputs.has_creds }}" == "false" ]; then
            echo "‚ùå **Status**: Skipped (Missing or Invalid GSC Credentials)" >> $GITHUB_STEP_SUMMARY
            echo "üí° **Action Needed**: Configure valid GSC_CLIENT_EMAIL and GSC_PRIVATE_KEY secrets" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ **Status**: Completed" >> $GITHUB_STEP_SUMMARY
            if [ -f ".seo-cache/gsc-indexing-$(date +%Y-%m-%d).json" ]; then
              SUBMITTED_COUNT=$(jq -r '.submitted_count // 0' ".seo-cache/gsc-indexing-$(date +%Y-%m-%d).json")
              FAILED_COUNT=$(jq -r '.failed_count // 0' ".seo-cache/gsc-indexing-$(date +%Y-%m-%d).json")
              echo "üìà **URLs Submitted**: $SUBMITTED_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "‚ùå **Errors**: $FAILED_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "üéØ **Next Steps**: Monitor GSC for indexing improvements within 24-48 hours" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: üìÑ Upload indexing reports
        uses: actions/upload-artifact@v4
        with:
          name: gsc-priority-indexing-${{ github.run_number }}
          path: |
            reports/seo/indexing/
          retention-days: 30
        if: always()
      
      - name: üö® Create issue for failures
        if: steps.generate-summary.outputs.failed_count > 5
        uses: actions/github-script@v7
        with:
          script: |
            const failedCount = '${{ steps.generate-summary.outputs.failed_count }}';
            const successRate = '${{ steps.generate-summary.outputs.success_rate }}';
            const reportDate = new Date().toISOString().split('T')[0];
            
            const { data: issue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® GSC Priority Indexing Failures - ${reportDate}`,
              body: `# GSC Priority URL Indexing Issues
              
              **Alert**: ${failedCount} URLs failed to submit to Google Search Console
              **Success Rate**: ${successRate}%
              **Date**: ${reportDate}
              
              ## üîç Investigation Required
              
              Multiple priority URLs failed to submit to GSC Indexing API. This may indicate:
              
              - Authentication issues with GSC service account
              - API quota limits exceeded
              - Invalid or inaccessible URLs
              - Temporary GSC API issues
              
              ## üìä View Detailed Report
              
              - [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              - [Download Reports](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              
              ## üîß Recommended Actions
              
              1. Review the detailed indexing log for specific error messages
              2. Verify GSC service account permissions
              3. Check if failed URLs return 200 status codes
              4. Consider re-running the workflow for failed URLs only
              
              ---
              
              *Auto-generated by GSC Priority Indexing Workflow*`,
              labels: ['seo', 'gsc-indexing', 'critical', 'automated']
            });
            
            console.log(`üö® Created critical indexing issue #${issue.number}`);
      
      - name: ‚úÖ Summary
        run: |
          echo "## üöÄ GSC Priority URL Indexing Complete"
          echo ""
          echo "**URLs Processed**: ${{ steps.load-urls.outputs.urls_to_process }}"
          echo "**Success Rate**: ${{ steps.generate-summary.outputs.success_rate }}%"
          echo "**Mode**: ${{ github.event.inputs.dry_run == 'true' && 'DRY RUN' || 'LIVE SUBMISSION' }}"
          echo "**Report**: ${{ steps.generate-summary.outputs.summary_file }}"
          echo ""
          echo "Next indexing can be run in 24 hours (API quota limits)"